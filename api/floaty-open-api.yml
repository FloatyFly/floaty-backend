openapi: 3.0.3
info:
  title: Floaty API
  description: |-
    The backend API for Floaty.\
    You might use [https://editor-next.swagger.io/]() for development.
  version: 0.0.1
tags:
  - name: users
    description: Look up all the users you want.
  - name: flights
    description: Operations for managing paragliding flights.
  - name: gliders
    description: Operations for managing paragliding equipment.
  - name: spots
    description: Operations for managing launch and landing sites.
  - name: auth
    description: Authentication and user management operations.

paths:
  /users:
    get:
      tags:
        - users
      summary: Find all users.
      description: Returns a list of users.
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{userId}:
    get:
      tags:
        - users
      summary: Find user by ID.
      description: Returns a single user.
      operationId: findUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /flights/{userId}:
    get:
      tags:
        - flights
      summary: Find all flights for a given User.
      description: Returns a list of Flights for a User.
      operationId: getFlights
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flight'
  /flights/{flightId}:
    get:
      tags:
        - flights
      summary: Get a Flight by ID.
      description: Returns a single flight by its ID.
      operationId: getFlightById
      parameters:
        - name: flightId
          in: path
          description: ID of the flight to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
        '404':
          description: Flight not found
    delete:
      tags:
        - flights
      summary: Delete a Flight by ID.
      description: Deletes a single flight by its ID.
      operationId: deleteFlightById
      parameters:
        - name: flightId
          in: path
          description: ID of the flight to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content, successful deletion
        '404':
          description: Flight not found
    put:
      tags:
        - flights
      summary: Update a Flight by ID.
      description: Updates a single flight with the provided data.
      operationId: updateFlightById
      parameters:
        - name: flightId
          in: path
          description: ID of the flight to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated flight information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlightUpdate'
      responses:
        '200':
          description: Flight successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"
        '404':
          description: Flight not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Flight not found"
  /flights:
    post:
      tags:
        - flights
      summary: Create a flight for a given user.
      description: Register a new flight
      operationId: createFlight
      requestBody:
        description: Flight details including required glider and spots references
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flight'
      responses:
        '201':
          description: Flight created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
        '400':
          description: Invalid input or missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data or missing required fields"
        '404':
          description: Referenced glider or spots not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Referenced glider or spots not found"
    get:
      tags:
        - flights
      summary: Find all flights.
      description: Returns a list of all Flights for all users.
      operationId: findAllFlights
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flight'

  /gliders:
    get:
      tags:
        - gliders
      summary: Get all gliders.
      description: Returns a list of all gliders. The list is filtered such that only gliders owned by the logged in user are returned.
      operationId: getAllGliders
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Glider'
    post:
      tags:
        - gliders
      summary: Create a new glider.
      description: Add a new glider to the database.
      operationId: createGlider
      requestBody:
        description: Glider details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GliderCreate'
      responses:
        '201':
          description: Glider created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Glider'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"

  /gliders/{gliderId}:
    get:
      tags:
        - gliders
      summary: Get a glider by ID.
      description: Returns a single glider by its ID.
      operationId: getGliderById
      parameters:
        - name: gliderId
          in: path
          description: ID of the glider to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Glider'
        '404':
          description: Glider not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Glider not found"
    put:
      tags:
        - gliders
      summary: Update a glider by ID.
      description: Updates a single glider with the provided data.
      operationId: updateGliderById
      parameters:
        - name: gliderId
          in: path
          description: ID of the glider to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated glider information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GliderUpdate'
      responses:
        '200':
          description: Glider successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Glider'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"
        '404':
          description: Glider not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Glider not found"
    delete:
      tags:
        - gliders
      summary: Delete a glider by ID.
      description: Deletes a single glider by its ID.
      operationId: deleteGliderById
      parameters:
        - name: gliderId
          in: path
          description: ID of the glider to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content, successful deletion
        '404':
          description: Glider not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Glider not found"
        '409':
          description: Conflict - Glider is referenced by one or more flights
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Cannot delete glider as it is referenced by existing flights"

  /spots:
    get:
      tags:
        - spots
      summary: Get all spots.
      description: Returns a list of all paragliding spots (launch and landing sites).
      operationId: getAllSpots
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Spot'
    post:
      tags:
        - spots
      summary: Create a new spot.
      description: Add a new paragliding spot to the database.
      operationId: createSpot
      requestBody:
        description: Spot details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpotCreate'
      responses:
        '201':
          description: Spot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"

  /spots/{spotId}:
    get:
      tags:
        - spots
      summary: Get a spot by ID.
      description: Returns a single paragliding spot by its ID.
      operationId: getSpotById
      parameters:
        - name: spotId
          in: path
          description: ID of the spot to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot'
        '404':
          description: Spot not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Spot not found"
    put:
      tags:
        - spots
      summary: Update a spot by ID.
      description: Updates a single paragliding spot with the provided data.
      operationId: updateSpotById
      parameters:
        - name: spotId
          in: path
          description: ID of the spot to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated spot information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpotUpdate'
      responses:
        '200':
          description: Spot successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"
        '404':
          description: Spot not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Spot not found"
    delete:
      tags:
        - spots
      summary: Delete a spot by ID.
      description: Deletes a single paragliding spot by its ID.
      operationId: deleteSpotById
      parameters:
        - name: spotId
          in: path
          description: ID of the spot to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content, successful deletion
        '404':
          description: Spot not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Spot not found"
        '409':
          description: Conflict - Spot is referenced by one or more flights
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Cannot delete spot as it is referenced by existing flights"

  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user.
      description: Creates a new user with a username and password.
      operationId: registerUser
      requestBody:
        description: User registration details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/login:
    post:
      tags:
        - auth
      summary: Login a user.
      description: Authenticates a user and returns a session cookie or token.
      operationId: loginUser
      requestBody:
        description: User login credentials.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login.
          headers:
            Set-Cookie:
              description: Session cookie for authenticated user.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /auth/verify-email/{emailVerificationToken}:
    post:
      summary: Verify an Email.
      description: Verifies a user's email using the provided token.
      tags:
        - auth
      parameters:
        - name: emailVerificationToken
          in: path
          required: true
          schema:
            type: string
          description: Token for email verification
          example: 'some-generated-uuid-from-mailbox'
      responses:
        '200':
          description: Email verification successful
          content:
            application/json:
              schema:
                type: string
                example: "Email verification successful."
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid token."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found."
  /auth/initiate-password-reset:
    post:
      tags:
        - auth
      summary: Request a password reset initiation mail.
      description: Hitting this endpoint will send a mail to the given email (if exists) with the possibility to reset a password.
      operationId: initiatePasswordReset
      requestBody:
        description: The email adress attached to a user to reset the password for.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: 'floater@floatytest.com'
      responses:
        '200':
          description: Successful call to this endpoint.
        '400':
          description: Wrong input, e.g. invalid email format.
  /auth/reset-password:
    post:
      tags:
        - auth
      summary: Reset a password.
      description: Reset a password for a user with a given reset password token.
      operationId: resetPassword
      requestBody:
        description: The password request item.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Successfully reset the password.
        '400':
          description: Password reset failed, e.g., invalid password reset token.
  /auth/logout/{userId}:
    post:
      tags:
        - auth
      summary: Logout the user.
      description: Logs out the authenticated user and invalidates the session.
      operationId: logoutUser
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful logout.
        '400':
          description: Bad request.
        '403':
          description: Unauthorized.
        '500':
          description: Internal server error. Error invalidating the session.
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - emailVerified
      properties:
        id:
          type: string
          description: 'A unique id for this user. Property must not be given when creating a new user.'
          maxLength: 14
          example: '1'
        name:
          type: string
          example: 'Free Willy'
          description: 'The name of the user.'
        email:
          type: string
          example: "floater@gmail.com"
          description: 'The email adress of the user.'
        emailVerified:
          type: boolean
          example: false
          description: 'If the email has been verified by the user already or not.'

    Glider:
      type: object
      required:
        - id
        - manufacturer
        - model
      properties:
        id:
          type: string
          format: uuid
          description: 'Unique identifier for the glider. Generated by the server.'
          example: '123e4567-e89b-12d3-a456-426614174000'
        manufacturer:
          type: string
          description: 'Manufacturer of the glider.'
          example: 'Advance'
        model:
          type: string
          description: 'Model name of the glider.'
          example: 'Alpha 7'

    GliderCreate:
      type: object
      required:
        - manufacturer
        - model
      properties:
        manufacturer:
          type: string
          description: 'Manufacturer of the glider.'
          example: 'Advance'
        model:
          type: string
          description: 'Model name of the glider.'
          example: 'Alpha 7'

    GliderUpdate:
      type: object
      properties:
        manufacturer:
          type: string
          description: 'Manufacturer of the glider.'
          example: 'Advance'
        model:
          type: string
          description: 'Model name of the glider.'
          example: 'Alpha 7'

    Flight:
      type: object
      required:
        - dateTime
        - launchSpotId
        - landingSpotId
        - gliderId
      properties:
        flightId:
          type: string
          format: uuid
          description: 'Unique flight id. Usually generated by the server. UUID format.'
        dateTime:
          type: string
          format: date-time
          example: '2024-05-12T08:59:10'
          description: 'Datetime of the flight. Format: 2024-05-12T08:59:10. Local date time.'
        launchSpotId:
          type: string
          format: uuid
          description: 'Reference to the launch spot used for this flight.'
          example: '123e4567-e89b-12d3-a456-426614174000'
        landingSpotId:
          type: string
          format: uuid
          description: 'Reference to the landing spot used for this flight.'
          example: '223e4567-e89b-12d3-a456-426614174001'
        duration:
          type: integer
          format: int64
          example: 60
          description: 'Duration in minutes'
        description:
          type: string
          example: "This flight was epic."
          description: "Some textual description of the flight experience."
        gliderId:
          type: string
          format: uuid
          description: 'Reference to the glider used for this flight.'
          example: '123e4567-e89b-12d3-a456-426614174000'

    FlightUpdate:
      type: object
      properties:
        dateTime:
          type: string
          format: date-time
          example: '2024-05-12T08:59:10'
          description: 'Datetime of the flight. Format: 2024-05-12T08:59:10. Local date time.'
        launchSpotId:
          type: string
          format: uuid
          description: 'Reference to the launch spot used for this flight.'
          example: '123e4567-e89b-12d3-a456-426614174000'
        landingSpotId:
          type: string
          format: uuid
          description: 'Reference to the landing spot used for this flight.'
          example: '223e4567-e89b-12d3-a456-426614174001'
        duration:
          type: integer
          format: int64
          example: 60
          description: 'Duration in minutes'
        description:
          type: string
          example: "This flight was epic."
          description: "Some textual description of the flight experience."
        gliderId:
          type: string
          format: uuid
          description: 'Reference to the glider used for this flight.'
          example: '123e4567-e89b-12d3-a456-426614174000'

    Spot:
      type: object
      required:
        - id
        - name
        - type
        - latitude
        - longitude
        - altitude
      properties:
        id:
          type: string
          format: uuid
          description: 'Unique identifier for the spot. Generated by the server.'
          example: '123e4567-e89b-12d3-a456-426614174000'
        name:
          type: string
          description: 'Name of the paragliding spot.'
          example: 'Titlis Launch'
        type:
          type: string
          description: 'Type of the paragliding spot.'
          enum: [LAUNCH_SITE, LANDING_SITE, LAUNCH_AND_LANDING_SITE]
          example: 'LAUNCH_SITE'
        latitude:
          type: number
          format: double
          description: 'Latitude coordinate of the spot.'
          example: 47.37627
        longitude:
          type: number
          format: double
          description: 'Longitude coordinate of the spot.'
          example: 8.54896
        altitude:
          type: integer
          description: 'Height above sea level in meters.'
          example: 1200
        description:
          type: string
          description: 'Detailed description of the spot including conditions, access instructions, etc.'
          example: 'North-facing launch site with good thermals in the afternoon. Accessible via cable car.'

    SpotCreate:
      type: object
      required:
        - name
        - type
        - latitude
        - longitude
        - altitude
      properties:
        name:
          type: string
          description: 'Name of the paragliding spot.'
          example: 'Titlis Launch'
        type:
          type: string
          description: 'Type of the paragliding spot.'
          enum: [LAUNCH_SITE, LANDING_SITE, LAUNCH_AND_LANDING_SITE]
          example: 'LAUNCH_SITE'
        latitude:
          type: number
          format: double
          description: 'Latitude coordinate of the spot.'
          example: 47.37627
        longitude:
          type: number
          format: double
          description: 'Longitude coordinate of the spot.'
          example: 8.54896
        altitude:
          type: integer
          description: 'Height above sea level in meters.'
          example: 1200
        description:
          type: string
          description: 'Detailed description of the spot including conditions, access instructions, etc.'
          example: 'North-facing launch site with good thermals in the afternoon. Accessible via cable car.'

    SpotUpdate:
      type: object
      properties:
        name:
          type: string
          description: 'Name of the paragliding spot.'
          example: 'Titlis Launch'
        type:
          type: string
          description: 'Type of the paragliding spot.'
          enum: [LAUNCH_SITE, LANDING_SITE, LAUNCH_AND_LANDING_SITE]
          example: 'LAUNCH_SITE'
        latitude:
          type: number
          format: double
          description: 'Latitude coordinate of the spot.'
          example: 47.37627
        longitude:
          type: number
          format: double
          description: 'Longitude coordinate of the spot.'
          example: 8.54896
        altitude:
          type: integer
          description: 'Height above sea level in meters.'
          example: 1200
        description:
          type: string
          description: 'Detailed description of the spot including conditions, access instructions, etc.'
          example: 'North-facing launch site with good thermals in the afternoon. Accessible via cable car.'

    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          description: 'The username of the user.'
          example: 'Floater'
        password:
          type: string
          description: 'The password for the account.'
          example: 'Test12345'
        email:
          type: string
          format: email
          description: 'The email address of the user.'
          example: 'floater@floatytest.com'

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        name:
          type: string
          description: 'The username of the user.'
          example: 'Floater'
        password:
          type: string
          description: 'The password for the account.'
          example: 'Test12345'

    ResetPasswordRequest:
      type: object
      required:
        - passwordResetToken
        - newPassword
      properties:
        passwordResetToken:
          type: string
          description: 'The token which has been sent to the email.'
          example: 'some-generated-uuid-from-mailbox'
        newPassword:
          type: string
          description: 'The new password to set.'
          example: 'Test12345'