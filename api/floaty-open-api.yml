openapi: 3.0.3
info:
  title: Floaty API
  description: |-
    The backend API for floaty. Just an example. Needs to be developped. \
    You might use [https://editor-next.swagger.io/]() for development.
  version: 0.0.1
tags:
  - name: users
    description: Look up all the users you want.

paths:
  /users:
    get:
      tags:
        - users
      summary: Find all users.
      description: Returns a list of users.
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    post:
      tags:
        - users
      summary: Persist a new user.
      description: Add a new user to the backend persistence.
      operationId: createUser
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: User already exists
  /users/{userId}:
    get:
      tags:
        - users
      summary: Find user by ID.
      description: Returns a single user.
      operationId: findUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized to view user details
        '404':
          description: User not found
    delete:
      tags:
        - users
      summary: Delete a user by ID.
      description: Delete a specific user.
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully deleted user.


  /flights/{flightId}:
    delete:
      tags:
        - flights
      summary: Delete a Flight by ID.
      description: Deletes a single flight by its ID.
      operationId: deleteFlightById
      parameters:
        - name: flightId
          in: path
          description: ID of the flight to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: No content, successful deletion
        '404':
          description: Flight not found
  /flights:
    post:
      tags:
        - flights
      summary: Create a flight for a given user.
      description: Register a new flight
      operationId: createFlight
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flight'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
    get:
      tags:
        - flights
      summary: Find all flights.
      description: Returns a list of all Flights for all users.
      operationId: findAllFlights
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flight'


components:
  schemas:
    User:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          description: 'A unique id for this user. Property must not be given when creating a new user.'
          maxLength: 14
          example: 'USER0000123456'
          pattern: 'USER[0-9]{10}'
        name:
          type: string
          example: 'Free Willy'
          description: 'The name of the user.'
    Flight:
      type: object
      required:
        - userId
        - date
        - takeoff
      properties:
        flightId:
          type: string
          format: uuid
          description: 'Unique flight id. Usually generated by the server.'
        userId:
          type: integer
          format: int64
          description: 'Owner of the flight'
          maxLength: 14
        date:
          type: string
          example: '22.03.23'
          description: 'Date of the flight'
        takeoff:
          type: string
          example: 'Titlis'
          description: 'Take off location'
        duration:
          type: integer
          format: int64
          example: 60
          description: 'Duration in minutes'
